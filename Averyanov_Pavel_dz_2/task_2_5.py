# 5. Создать список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
# * Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки, как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
#
# * Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что объект списка после сортировки остался тот же).
# * Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# * Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?

# Создать список, содержащий цены на товары (10–20 товаров)
spisok = [57.8, 46.51, 97, 55.5, 16, 17.3, 38.5, 3.5, 22.5, 999.9, 16.4, 28.3]
print(spisok)

# * Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки, как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
pricespisok = []
for element in spisok:
    priceparts = f'{element:.2f}'.split('.')
    resultPrice  = f'{priceparts[0]} руб {priceparts[1]} коп'
    pricespisok.append(resultPrice )
print(pricespisok)

# * Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что объект списка после сортировки остался тот же).
print(f' ID списка: {id(pricespisok)}')
pricespisok.sort()
print(pricespisok)
print(f' ID списка: {id(pricespisok)}, следовательно, объект тот же после сортировки')

# Создать новый список, содержащий те же цены, но отсортированные по убыванию.
new_pricespisok = pricespisok.copy()
new_pricespisok.sort(reverse= True)
print(new_pricespisok)

# Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?
print(f' Пять самых дорогих товаров: {new_pricespisok[0:5]}')